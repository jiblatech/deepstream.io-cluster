/**
 * Flowtype definitions for constan
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.3.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

export type ALL_ACTIONS =
  | RECORD_ACTIONS
  | PRESENCE_ACTIONS
  | RPC_ACTIONS
  | EVENT_ACTIONS
  | AUTH_ACTIONS
  | CONNECTION_ACTIONS
  | PARSER_ACTIONS
  | STATE_ACTIONS
  | CLUSTER_ACTIONS
  | LOCK_ACTIONS;
export interface Message {
  topic: TOPIC;
  action: ALL_ACTIONS;
  name?: string;
  isError?: boolean;
  isAck?: boolean;
  data?: string | Buffer;
  parsedData?: any;
  payloadEncoding?: PAYLOAD_ENCODING;
  parseError?: undefined;
  raw?: string | Buffer;
  originalTopic?: TOPIC;
  originalAction?: ALL_ACTIONS;
  subscription?: string;
  names?: Array<string>;
  isWriteAck?: boolean;
  correlationId?: string;
  path?: string;
  version?: number;
  reason?: string;
  url?: string;
  protocolVersion?: string;
}
export type StateMessage = {
  name: string
} & Message;
export type SubscriptionMessage = {
  name: string
} & Message;
export type BulkSubscriptionMessage = {
  names: Array<string>
} & Message;
export type EventMessage = {
  action: EVENT_ACTIONS
} & SubscriptionMessage;
export type RPCMessage = {
  action: RPC_ACTIONS,
  correlationId: string
} & SubscriptionMessage;
export type PresenceMessage = {
  action: PRESENCE_ACTIONS,
  correlationId: string
} & Message;
export type ListenMessage = {
  action: RECORD_ACTIONS | EVENT_ACTIONS,
  subscription: string,
  raw?: string
} & SubscriptionMessage;
export type RecordMessage = {
  action: RECORD_ACTIONS
} & SubscriptionMessage;
export type RecordWriteMessage = {
  version: number,
  isWriteAck: boolean,
  path?: string,
  name: string
} & RecordMessage;
export type RecordAckMessage = {
  path?: string,
  data: any
} & RecordMessage;
export interface ParseError {
  parseError: boolean;
  action: PARSER_ACTIONS;
  parsedMessage: Message;
  raw?: Buffer;
  description?: string;
}
export type ParseResult = Message | ParseError;

